const cloud = require('wx-server-sdk');
const cloudBase = require('@cloudbase/node-sdk');

// Initialize SDK
cloud.init({ env: cloud.DYNAMIC_CURRENT_ENV });
const app = cloudBase.init({
  env: cloudbase.SYMBOL_CURRENT_ENV,
});
const db = app.database();

/**
 * WeChat Pay Product Order API Example
 * Assumes existing order and product entities
 * @param {*} event - Cloud function call event object. When called from mini-program, event is the parameter passed; when called via HTTP request, event is the `integrated request body`
 * @param {*} context - Cloud function context
 * @returns {Promise<*>} Response result
 */
exports.main = async (event, context) => {
  // Handle different events based on type
  switch (event.type) {
    case 'wxpay_order':
      return await wxpayOrder(event, context);
    case 'wxpay_query_order_by_out_trade_no':
      return await queryOrderByOutTradeNo(event, context);
    case 'wxpay_query_order_by_transaction_id':
      return await queryOrderByTransactionId(event, context);
    case 'wxpay_refund':
      return await refund(event, context);
    case 'wxpay_refund_query':
      return await refundQuery(event, context);
    default:
      return {
        code: -1,
        msg: 'Unimplemented method',
      };
  }
};

/**
 * Unified Order
 * @param {object} params - Product description
 * @param {string} params.productId - Product ID
 * @param {number} params.count - Product quantity
 * @param {*} context - Cloud function context
 * @returns {Promise<*>} Response result
 */
async function wxpayOrder(params, context) {
  const wxContext = cloud.getWXContext();
  // 1. Validate input parameters
  // For example only, actual business may require more precise validation
  if (!params.productId || !params.count) {
    return { code: -1, msg: 'Invalid params' };
  }

  // 2. Query product information by product ID, product info should not be passed from frontend
  const productRes = await db.collection('production').doc(params.productId).get();

  if (!productRes.data?.length) {
    return { code: -1, msg: 'Product not found' };
  }
  const product = productRes.data[0];

  // 3. Construct order data
  // Merchant order number, generated by merchant, this is just example code
  const outTradeNo = Math.round(Math.random() * 10 ** 13) + Date.now();
  // Order amount
  const amountTotal = params.count * product.price;
  // Currency type
  const amountCurrency = 'CNY';

  const orderData = {
    // Product description
    description: product.description,
    out_trade_no: outTradeNo,
    // Order amount information
    amount: {
      // Total order amount, in cents
      total: amountTotal,
      // CNY: Chinese Yuan, domestic merchant accounts only support CNY
      currency: amountCurrency,
    },
    // Payer
    payer: {
      // Get current user openId directly in server-side cloud function, do not pass from frontend
      openid: wxContext.OPENID,
    },
    // Callback URL for receiving WeChat Pay result notifications asynchronously
    notify_url: 'https://example.com/wxpay/notify',
  };

  // 4. Store order information to database
  const orderRes = await db.collection('order').add({
    data: {
      outTradeNo,
      productId: product.id,
      openid: wxContext.OPENID,
      amountTotal,
      amountCurrency,
      // ...more fields
    },
  });

  if (!orderRes.id) {
    return { code: -1, msg: 'Order save failed' };
  }

  // 5. Call WeChat Pay API to generate payment order
  const res = await cloud.callFunction({
    name: 'cloudbase_module',
    data: {
      // Workflow name
      name: 'wxpay_order',
      data: orderData,
    },
  });

  // [6]. Can validate if order result meets expectations

  return { code: 0, data: res.result };
}

/**
 * Query order by merchant order number
 * @param {object} params
 * @param {string} params.outTradeNo Merchant order number
 * @param {*} context
 * @returns
 */
async function queryOrderByOutTradeNo(params, context) {
  // 1. Validate input parameters
  if (!params.outTradeNo) {
    return { code: -1, msg: 'Invalid params' };
  }

  // 2. Query order
  const res = await cloud.callFunction({
    name: 'cloudbase_module',
    data: {
      // Workflow name
      name: 'wxpay_query_order_by_out_trade_no',
      // Example data, please modify according to actual business situation
      data: {
        // Please enter actual merchant order number
        out_trade_no: params.outTradeNo,
      },
    },
  });

  // [3]. Can validate if query result meets expectations

  return { code: 0, data: res.result };
}

/**
 * Query order by WeChat Pay transaction ID
 * @param {object} params
 * @param {string} params.transactionId WeChat Pay transaction ID
 * @param {*} context
 * @returns
 */
async function queryOrderByTransactionId(params, context) {
  // 1. Validate input parameters
  // transaction_id can be obtained through `Payment Notification API` and stored in `order` table, see details: https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_1_5.shtml
  // transaction_id can be passed from frontend, or queried from database through other related fields
  if (!params.transactionId) {
    return { code: -1, msg: 'Invalid params' };
  }

  // 2. Query order
  const res = await cloud.callFunction({
    name: 'cloudbase_module',
    data: {
      // Workflow name
      name: 'wxpay_query_order_by_transaction_id',
      // Example data, please modify according to actual business situation
      data: {
        // Please enter actual WeChat Pay transaction ID
        transaction_id: params.transactionId,
      },
    },
  });

  // [3]. Can validate if query result meets expectations

  return { code: 0, data: res.result };
}

/**
 * Apply for refund
 * @param {object} params
 * @param {string} params.orderId Order ID
 * @param {*} context
 * @returns
 */
async function refund(params, context) {
  // 1. Validate input parameters
  if (!params.orderId) {
    return { code: -1, msg: 'Invalid params' };
  }

  // 2. Query order by order ID
  const orderRes = await db.collection('order').doc(params.orderId).get();

  if (!orderRes.data?.length) {
    return { code: -1, msg: 'Invalid order' };
  }
  const order = orderRes.data[0];

  // 3. Construct request data
  // Merchant internal refund number, generated by merchant, this is just example code. Can be stored in `order` table
  const outRefundNo = Math.round(Math.random() * 10 ** 13) + Date.now();
  // Refund amount, please modify according to actual situation
  const refundAmount = 1;

  const refundData = {
    transaction_id: order.transactionId,
    out_refund_no: outRefundNo,
    amount: {
      refund: refundAmount, // Refund amount
      total: order.amountTotal, // Original order amount,
      currency: order.amountCurrency,
    },
  };

  // 4. Initiate refund request
  const res = await cloud.callFunction({
    name: 'cloudbase_module',
    data: {
      // Workflow name
      name: 'wxpay_refund',
      // Example data, please modify according to actual business situation
      data: refundData,
    },
  });

  // 5. Check if refund was successful
  if (res.result.code) {
    // Error handling
    return { code: -1, msg: 'Error message' };
  }

  // 6. Update order status
  const orderUpdateRes = await db
    .collection('order')
    .doc(params.orderId)
    .update({
      data: {
        refunded: 1,
        refundAmount,
        refundTime: Date.now(),
      },
    });

  if (orderUpdateRes.updated !== 1) {
    // Handle update failure
  }

  return { code: 0, data: res.result };
}

/**
 * Query single refund by merchant refund number
 * @param {object} params
 * @param {string} params.outRefundNo Merchant refund number
 * @param {*} context
 */
async function refundQuery(params, context) {
  // 1. Validate input parameters
  if (!params.outRefundNo) {
    return { code: -1, msg: 'Invalid params' };
  }

  // 2. Initiate query request
  const res = await cloud.callFunction({
    name: 'cloudbase_module',
    data: {
      // Workflow name
      name: 'wxpay_refund_query',
      // Example data, please modify according to actual business situation
      data: {
        params: {
          out_refund_no: params.outRefundNo, // Enter merchant refund number
        },
      },
    },
  });

  // [3]. Can validate if query result meets expectations

  return { code: 0, data: res.result };
}
